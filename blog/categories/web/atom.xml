<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | 电一闪的博客]]></title>
  <link href="http://showmylym.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://showmylym.github.io/"/>
  <updated>2015-10-21T22:37:37+08:00</updated>
  <id>http://showmylym.github.io/</id>
  <author>
    <name><![CDATA[雷一鸣(Jerry)]]></name>
    <email><![CDATA[showmylym@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[搭建企业级app分发服务器]]></title>
    <link href="http://showmylym.github.io/blog/2015/10/21/da-jian-qi-ye-ji-app-fen-fa-fu-wu-qi/"/>
    <updated>2015-10-21T22:14:12+08:00</updated>
    <id>http://showmylym.github.io/blog/2015/10/21/da-jian-qi-ye-ji-app-fen-fa-fu-wu-qi</id>
    <content type="html"><![CDATA[<h3>一、配置证书:</h3>

<h4>1、生成key</h4>

<p>　　在apache2目录下，新建ssl目录</p>

<pre><code>sudo mkdir /private/etc/apache2/ssl
cd /private/etc/apache2/ssl
sudo ssh-keygen -f server.key
</code></pre>

<p>　　这里不设置RSA口令</p>

<h4>2、生成请求文件</h4>

<pre><code>sudo openssl req -new -key server.key -out request.csr
</code></pre>

<h4>3、生成SSL证书</h4>

<pre><code>sudo openssl x509 -req -days 365 -in request.csr -signkey server.key -out server.crt
</code></pre>

<p>　　至此，生成/private/etc/apache2/ssl/目录下&#8221;request.csr&#8221; &ldquo;server.crt&rdquo; &ldquo;server.key&rdquo; &ldquo;server.key.pub&#8221;四个文件</p>

<h3>二、配置apache让其支持https</h3>

<h4>1、修改/private/etc/apache2/httpd.conf文件，去掉下面三行前面的注释符号</h4>

<pre><code>LoadModule ssl_module libexec/apache2/mod_ssl.so
LoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.so
Include /private/etc/apache2/extra/httpd-ssl.conf
Include /private/etc/apache2/extra/httpd-vhosts.conf
</code></pre>

<h4>2、修改/private/etc/apache2/extra/httpd-ssl.conf ，去掉下面两行前面的 &lsquo;#&rsquo;</h4>

<pre><code>SSLCertificateFile "/private/etc/apache2/ssl/server.crt"
SSLCertificateKeyFile "/private/etc/apache2/ssl/server.key"
</code></pre>

<h4>3、修改/private/etc/apache2/extra/httpd-vhosts.conf，在 &lsquo;NameVirtualHost * :80&rsquo; 后面添加：</h4>

<pre><code>NameVirtualHost *:443
</code></pre>

<p>　　在文件末尾添加：</p>

<pre><code>&lt;VirtualHost *:443&gt;
SSLEngine on
SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
SSLCertificateFile /private/etc/apache2/ssl/server.crt
SSLCertificateKeyFile /private/etc/apache2/ssl/server.key
ServerName localhost
DocumentRoot "（此为Apache工作根目录）"
&lt;/VirtualHost&gt;
</code></pre>

<h3>三、架设企业级应用服务。</h3>

<h4>1、生成install.html</h4>

<p>　　代码如下所示</p>

<pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;style type="text/css"&gt;
    * {
        font-size: 52px;
    }

    a {
        line-height: 2.5;
        padding: 20px;
    }
&lt;/style&gt;
安装步骤：&lt;br/&gt;
1、首次安装需要点击&lt;a href="https://192.168.1.239/server.crt" id="text"&gt;“安装证书”&lt;/a&gt;&lt;br/&gt;
2、否则直接点击 &lt;br/&gt;
&lt;a href="itms-services://?action=download-manifest&amp;url=https://192.168.1.239/g0/mlf.plist" id="text"&gt;“安装平台版app”&lt;/a&gt; &lt;br/&gt;
</code></pre>

<h4>2、手机需先安装server.crt。</h4>

<p>　　因此拷贝/private/etc/apache2/ssl/server.crt到Apache根目录下，install.html中编写超链接指向该证书文件，供设备下载安装。</p>

<h4>3、将mlf.plist mlf.ipa mlf.png存放在自定义目录下，并在install.html中指向它们。</h4>

<p>　　mlf.plist代码如下所示</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
&lt;key&gt;items&lt;/key&gt;
&lt;array&gt;
    &lt;dict&gt;
        &lt;key&gt;assets&lt;/key&gt;
        &lt;array&gt;
            &lt;dict&gt;
                &lt;key&gt;kind&lt;/key&gt;
                &lt;string&gt;software-package&lt;/string&gt;
                &lt;key&gt;url&lt;/key&gt;
                &lt;string&gt;https://192.168.1.239/g0/mlf.ipa&lt;/string&gt;
            &lt;/dict&gt;
            &lt;dict&gt;
                &lt;key&gt;kind&lt;/key&gt;
                &lt;string&gt;full-size-image&lt;/string&gt;
                &lt;key&gt;needs-shine&lt;/key&gt;
                &lt;true/&gt;
                &lt;key&gt;url&lt;/key&gt;
                &lt;string&gt;https://192.168.1.239/g0/mlf.png&lt;/string&gt;
            &lt;/dict&gt;
            &lt;dict&gt;
                &lt;key&gt;kind&lt;/key&gt;
                &lt;string&gt;display-image&lt;/string&gt;
                &lt;key&gt;needs-shine&lt;/key&gt;
                &lt;true/&gt;
                &lt;key&gt;url&lt;/key&gt;
                &lt;string&gt;https://192.168.1.239/g0/mlf.png&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/array&gt;
        &lt;key&gt;metadata&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;bundle-identifier&lt;/key&gt;
            &lt;string&gt;cn.meilif.mlfinhouse&lt;/string&gt;
            &lt;key&gt;bundle-version&lt;/key&gt;
            &lt;string&gt;2.0&lt;/string&gt;
            &lt;key&gt;kind&lt;/key&gt;
            &lt;string&gt;software&lt;/string&gt;
            &lt;key&gt;title&lt;/key&gt;
            &lt;string&gt;美丽范&lt;/string&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
&lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GithubPage页面国内打开缓慢的问题]]></title>
    <link href="http://showmylym.github.io/blog/2014/11/29/githubpageye-mian-guo-nei-da-kai-huan-man-de-wen-ti/"/>
    <updated>2014-11-29T12:23:23+08:00</updated>
    <id>http://showmylym.github.io/blog/2014/11/29/githubpageye-mian-guo-nei-da-kai-huan-man-de-wen-ti</id>
    <content type="html"><![CDATA[<p>　　其实早在两年前，我在<a href="http://www.cnblogs.com/showmylym" title="博客园">博客园</a>创建过个人博客，零零散散写了些很业余的东西，没有系统性地写，与编程也没有太大关系，没能坚持。在最近的工作中，有了分享意识，并且发现一个知识点如果能够给别人讲懂，知识点会融入进自己的知识体系，理解程度会有质的变化。因此决定重新做一个专业的博客，一来给自己总结，二来可能会帮助到其他人。虽然国内技术博客站不少，但大多都掺杂太多广告，不够纯粹，考虑到平时频繁用到github找代码，遂决定在github上建博客，与自己的开源代码结合。这次一定可以坚持下去:)<br/>
　　不过一上来就碰到国内打开博客页面慢的问题，且翻墙时灵时不灵。跟了一下页面加载的过程，发现首页有四个链接加载超时，如下图1-1。<br/>
<img src="/images/1/1-1.png" title="图1-1" alt="图1-1" /><br/>
图1-1<br/>
　　Copy出来，四个URL如下：<br/>
　　<code>https://fonts.googleapis.com/css?family=Open+Sans:400,700</code><br/>
　　<code>http://platform.twitter.com/widgets.js</code><br/>
　　<code>http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js</code><br/>
　　<code>https://fonts.googleapis.com/css?family=Noto+Serif:400,700</code><br/>
　　首先关掉twitter账户关联。按照<a href="http://wenku.baidu.com/view/8a146ba2d0d233d4b14e69ae.html" title="HTML页面的加载过程">HTML页面的加载过程</a>，浏览器首先解析页面结构，再加载外部CSS和script。如果在<code>&lt;head&gt;</code>标签里碰到<code>&lt;script&gt;</code>，则解析页面结构时就会加载脚本。此时若网络延迟较大，会出现长时间的白屏。猜测首页打开缓慢应当是这个原因，因此参考<a href="http://blog.csdn.net/chang_yuan_2011/article/details/7881606" title="不同javascript加载方式对页面性能的影响">不同javascript加载方式对页面性能的影响</a>，首先尝试将script放在body结尾前执行。<br/>
　　打开octopress博客源代码的source目录，使用grep命令搜索内容中带有&#8221;script&#8221;的文件(i为忽略大小写，r为递归查找，l为以文件列表形式显示)。<br/>
　　<code>grep -irl script | grep htm</code><br/>
　　搜索结果如下图1-2。<br/>
<img src="/images/1/1-2.png" title="图1-2" alt="图1-2" /><br/>
图1-2<br/>
　　文件有点多，不好找。考虑过后，决定直接搜索图1-1中标红的那几个URL。搜索命令分别为：<br/>
　　<code>grep -irl jquery | grep htm</code> <br/>
　　<code>grep -irl https://fonts.googleapis.com/css?family=Noto+Serif:400,700 | grep htm</code> <br/>
　　<code>grep -irl https://fonts.googleapis.com/css?family=Open+Sans:400,700 | grep htm</code> <br/>
　　根据结果了解到，调用这三条URL的执行语句，在<em>includes/head.html和</em>includes/custom/head.html中，对其做如下图1-3和图1-4的修改。<br/>
<img src="/images/1/1-3.png" title="图1-3" alt="图1-3" /><br/>
图1-3<br/>
<img src="/images/1/1-4.png" title="图1-4" alt="图1-4" /><br/>
图1-4<br/>
　　修改完毕刷新页面。页面显示很快，但在Chrome的网络控制台上，显示还有4个URL访问缓慢，如下图1-5。<br/>
<img src="/images/1/1-5.png" title="图1-5" alt="图1-5" /><br/>
图1-5<br/>
　　继续搜索关键字&#8221;gstatic&#8221;<br/>
　　<code>grep -irl gstatic</code><br/>
　　搜索结果如下图1-6<br/>
<img src="/images/1/1-6.png" title="图1-6" alt="图1-6" /><br/>
图1-6<br/>
　　打开这两个刚刚创建的css样式文件，很明显可以看到其引用了不少gstatic.com上存储的woff2格式的web开放字体文件。目前还没发觉其对页面显示有何影响，花点时间将它们定位到本地吧。<br/>
　　哈哈，问题到此已解决，打开首页显示速度快多了:)</p>
]]></content>
  </entry>
  
</feed>
