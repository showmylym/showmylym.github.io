<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 杂谈 | 电一闪的博客]]></title>
  <link href="http://showmylym.github.io/blog/categories/za-tan/atom.xml" rel="self"/>
  <link href="http://showmylym.github.io/"/>
  <updated>2015-06-30T22:42:11+08:00</updated>
  <id>http://showmylym.github.io/</id>
  <author>
    <name><![CDATA[雷一鸣(Jerry)]]></name>
    <email><![CDATA[showmylym@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift学习笔记]]></title>
    <link href="http://showmylym.github.io/blog/2015/06/30/swift-xue-xi-bi-ji/"/>
    <updated>2015-06-30T21:25:12+08:00</updated>
    <id>http://showmylym.github.io/blog/2015/06/30/swift-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>　　swift2.0本月刚刚发布，在1.0基础上，增加了些许<a href="http://www.csdn.net/article/2015-06-09/2824909-xcode-7-beta-and-swift/2">新特性</a>，改变了1.0中少量语法。</p>

<h3>Swift 1.0理解畅谈</h3>

<h4>一、优势</h4>

<p>　　1、if x = y是错误代码，在Swift里会报编译错。<br/>
　　2、溢出运算符、运算符重载。<br/>
　　3、swift可以对浮点数取余 8%2.5结果为0.5。<br/>
　　4、OC时代</p>

<pre><code>return str1 != nil ? str1 : defaultStr
</code></pre>

<p>　　现在swift里可以简化为</p>

<pre><code>return str1 ?? defaultStr。  
</code></pre>

<p>　　5、Unicode字符标量方便表示，比如 let oneUniChar = “\u{2665}”。<br/>
　　6、作为基础类型之一的String，其赋值时可视作深拷贝（实际大多数情况下不是），又经swift编译器优化，在必要时才会深拷贝，以提高性能。<br/>
　　7、向数组中加入元素可以直接用运算符+=，前提是保证被加入的元素与数组本身的元素类型保持一致。<br/>
　　8、可以方便地将数组中某一范围的元素，替换为另一数组，且前后数量可以不匹配。例如</p>

<pre><code>var elements = ["lym1", "lym2", "lym3"]
elements[1...2] = ["lym4"]
</code></pre>

<p>　　这样数组elements就被修改为[&ldquo;lym1&rdquo;, &ldquo;lym4&rdquo;]。<br/>
　　9、for-in循环支持区间、序列、集合、系列遍历，使用_可以方便控制只循环次数且不对值访问。<br/>
　　10、使用switch不再需要break语句，且case的条件判断可以使用if语句样式的条件表达式（例如区间、元组、字符串），因此原来各种条件判断、计算结果非整型的表达式，现在都可以使用switch来提高判断效率。<br/>
　　11、switch语句默认不再有贯穿case的做法（case之间不写break），而是显式地使用fallthrough关键字，不丢弃贯穿特性，同时意图更加清晰。<br/>
　　12、使用标签标注“循环”或“switch代码段”，方便地跳出多重循环（第一次了解这个概念是在学习java时，可以说是借鉴）。<br/>
　　13、swift中简化了函数重载，C++中函数重载需要多次函数定义，而OC原本不支持函数重载，现swift使用函数默认参数值即可在一次函数定义中实现函数重载。例如，方法定义：</p>

<pre><code>func testOverrideMethod(value1:Int16, value2:Int16 = 2) {
    print("testOverrideMethod, value1:\(value1), value2:\(value2)")
}  
testOverrideMethod(1, value2: 22)  
</code></pre>

<p>　　如果给参数设置了默认值，那么调用方法时必须指明参数名；否则调用时可以不用写名&#8221;value2:&ldquo;。<br/>
　　14、swift中函数传值时，如果外部对象真正的值想在函数体中被修改，使用inout关键字修饰变量，用以替代指针的指针这样的复杂概念“**”，例如：</p>

<pre><code>func swap (inout value1 : Int16, inout value2 : Int16) {
    var tempValue = value1
    value1 = value2
    value2 = tempValue
}
var value1 = 1, value2 = 2
//打印结果"value1:1, value2:2"
print("value1:\(value1), value2:\(value2)") 
swap(&amp;value1, &amp;value2)
//打印结果"value1:2, value2:1"
print("value1:\(value1), value2:\(value2)")
</code></pre>

<p>　　15、swift中的枚举可支持任意类型，包括但不限于Int、String、Bool、Tuple(元组)，且可以在一个枚举定义中支持任意多种成员类型。<br/>
　　16、swift拥有“可失败构造器”。在OC中，常常碰到先alloc分配内存，再initWithXXX传递参数初始化，可在某些条件下（比如参数类型错误）无法初始化有意义的对象，为instance分配内存就造成了时间空间浪费。具体做法是，swift类构造器的init关键字后紧跟问号，方法定义写成init?(xxx)，在满足失败条件时，返回nil。<br/>
　　17、与OC同时期的C++早就有了泛型的概念，而OC一直缺乏，现在swift补上了这一空缺。</p>

<h4>二、陷阱</h4>

<p>　　1、使用countElements计算字符串长度是基于unicode，而NSString的length方法则是基于UTF-16，因此NSString的length属性在被swift的String访问时，会成为utf16count。<br/>
　　2、在swift中构造的类，OC中无法继承。<br/>
　　3、为了避免循环引用，在OC中导入swift类，需要在.h文件中用@class声明，.m文件中导入。<br/>
　　4、swift用于判断两个类实例对象是否为同一对象的运算符为”===“和”!==“，分别名为“等价于”和“不等价于”。而实例具体内容是否相等需要根据类中定义的“等于”（==）方法判定，该方法属运算符重载。<br/>
　　5、swift中的String、Array、Dictionary类型均为结构体类型，赋值时为深拷贝赋值；不同于OC中NSString、NSArray、NSDictionary的浅拷贝，即复制引用。不过swift会在后台完成性能优化，以确保在有需要时才做深拷贝。<br/>
　　6、swift的构造器，构造顺序与OC相反。OC中必须先调用父类初始化方法，才能初始化子类变量；而swift必须先给子类未初始化的变量赋值，再调用父类指定构造器(Desinated)。其本质原因为，swift加强了构造安全，目的是准确分配内存。具体步骤为：</p>

<pre><code>a. 初始化子类中所有引入的存储型属性 
b. 调用父类指定构造器。按此步骤，直到祖先类最顶端的指定构造器调用完成，才算子类实例完全初始化，此时self成为一个有效的引用型变量
c. 自顶向下，让各个子类有机会修改继承来的存储型变量。
</code></pre>

<p>　　反观OC，在子类初始化时，自下向上调用初始化方法，先使self成为有效对象，再为子类变量分配内存。无所谓孰优孰劣，只是swift在构造器的安全性上略有提升。<br/>
　　7、在定义子类时，想要继承父类所有构造器，必须没有定义任何子类构造函数；或子类覆盖实现了所有父类指定构造器(Desinated)。这样设计的目的，个人猜想是为了让子类更纯粹，不暴露无关的父类构造器以致混淆类定义，强化类的目的性。<br/>
　　8、便利构造器(Convenience)不可继承，且实现中必须以调用指定构造器结束(Desinated)。它在类中起辅助作用，目的是减少构造器中的重复代码。<br/>
　　9、swift中的前缀运算符与后缀运算符，必须紧跟变量，中间不能插空格。例如，OC中常写i ++，但在swift中必须i++。</p>

<h4>三、与OC对比</h4>

<p>　　1、swift有简单明了的函数声明。首先，它有内部参数名，在调用时会被当作占位符。<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/5%2F1.png"><br/>
　　这一块乍看起来像JS，但仔细观察，会发现一些OC的影子。比如倒数第二行带占位符的函数调用，参数名后跟“:value”，是典型的OC风格。
不仅于此，为了防止代码编写完成后由于没有内部参数名而难以阅读，swift还增加了外部参数名机制。代码如下<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/5%2F2.png"><br/>
　　&#8221;from&#8221;和&#8221;say&#8221;作为外部参数名，用于显式描述参数用途。另，在内部参数名前使用#标注，即可同时作为内外部参数名。<br/>
　　2、我觉得，swift彻底把“方法”（函数）变成了“block”（命名闭包）。比如这段代码: <br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/5%2F3.png"><br/>
　　根据传入值的true or false，返回在函数内部定义的函数变量。使用OC的block实现如下，是否有异曲同工之妙？<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/5%2F4.png"><br/>
　　3、swift的尾随闭包非常简便易用，但简写的方法非常跳跃。（小屏请横屏查看）<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/5%2F5.png"><br/>
代码：</p>

<pre><code>//闭包作为函数的最后一个参数时，可以改写为尾随闭包
//定义一个函数，其参数是一个类型为Int64，返回值为Void的闭包closure
func someFuncForTestClosure (closure:(Int64) -&gt; Void) {
    closure(4)
}
//调用已定义的函数，并定义闭包作为参数
someFuncForTestClosure ({ (para) -&gt; Void in
    print("调用了closure,参数为\(para)")
    print("调用了closure,参数为\(para)")
})
//如果闭包特别复杂特别长，尾随闭包作用凸显
someFuncForTestClosure (){ (para) -&gt; Void in
    print("调用了closure,参数为\(para)")
    print("调用了closure,参数为\(para)")
    print("调用了closure,参数为\(para)")
    print("调用了closure,参数为\(para)")
    print("调用了closure,参数为\(para)")
}
//尾随闭包前的函数参数括号也可以省略
//不理解缩写过程咋一看还以为是函数定义
someFuncForTestClosure { (para) -&gt; Void in
    print("调用了closure,参数为\(para)")
    print("调用了closure,参数为\(para)")
}
//简直丧心病狂，还可以简写为
someFuncForTestClosure { 
    print("调用了closure,参数为\($0)")
    print("调用了closure,参数为\($0)")
}
</code></pre>

<p>　　4、swift中，可变类型和常量类型用关键字声明区分，var代表变量，let代表常量。而原来OC中使用两种类NSXXX和NSMutableXXX定义是否可变。<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/5%2F6.png"><br/>
　　5、swift三种元类型在修改self值时的区别。其中class修改self或实例属性最简单，其余两种都需要将关键字mutating作为方法前缀才能实现。</p>

<pre><code>//class类
class Point {
    var x = 0.0, y = 0.0
    //class中的函数，对self的值想怎么改就怎么改
    func moveByX(deltaX: Double, y deltaY: Double) {
        self.x += deltaX
        self.y += deltaY
    }
    init(x:Double, y:Double) {
        self.x = x
        self.y = y
    }
}
var somePoint = Point(x: 1.0, y: 1.0)
somePoint.moveByX(2.0, y: 3.0)
println("The point is now at (\(somePoint.x), \(somePoint.y))")
// 输出 "The point is now at (3.0, 4.0)"

//struct结构体
struct Point_struct {
    var x = 0.0, y = 0.0
    //要修改self的值，必须在声明前添加mutating关键字
    mutating func moveByX(deltaX: Double, y deltaY: Double) {
        self.x += deltaX
        self.y += deltaY
    }
    init(x:Double, y:Double) {
        self.x = x
        self.y = y
    }
}
var somePoint_struct = Point_struct(x: 1.0, y: 1.0)
somePoint_struct.moveByX(2.0, y: 3.0)
println("The point is now at (\(somePoint_struct.x), \(somePoint_struct.y))")
// 输出 "The point is now at (3.0, 4.0)"

//枚举
enum Point_enum {
    //error：枚举定义不能包含存储属性
    var x = 0.0, y = 0.0
    mutating func moveByX(deltaX: Double, y deltaY: Double) {
        self.x += deltaX
        self.y += deltaY
    }
    init(x:Double, y:Double) {
        self.x = x
        self.y = y
    }
}
var somePoint_enum = Point_enum(x: 1.0, y: 1.0)
somePoint_enum.moveByX(2.0, y: 3.0)
println("The point is now at (\(somePoint_enum.x), \(somePoint_enum.y))")
// 输出 "The point is now at (3.0, 4.0)"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App日志查看器]]></title>
    <link href="http://showmylym.github.io/blog/2015/06/04/app-ri-zhi-cha-kan-qi/"/>
    <updated>2015-06-04T21:52:12+08:00</updated>
    <id>http://showmylym.github.io/blog/2015/06/04/app-ri-zhi-cha-kan-qi</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>　　实际开发中，有在生产环境里碰到诸多疑难杂症的棘手问题。对于问题，最佳解决手法之一是坏点检测，一层一层诊断，抽丝剥茧。那么诊断依据——日志，就是一种强大的执行手段。</p>

<h3>最终效果</h3>

<h5>日志按时间戳倒序展示，提供关键字搜索</h5>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/4%2F2.gif" title="日志文件选取" alt="日志文件选取"/></p>

<h5>日志文件选取器</h5>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/4%2F3.gif" title="日志文件选取" alt="日志文件选取"/></p>

<h3>设计思想</h3>

<h5>一、文件结构：</h5>

<p>　　1、第一次构思的文件结构，就是简单的顺序写入文本文件，每一条记录加入一些格式化符号，增加辨识度。比如：</p>

<pre><code>2015-06-01 21:35:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:36:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:37:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:38:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:39:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:39:07 应用特征名 日志级别【日志内容】\r\n  
</code></pre>

<p>　　那么问题来了，作为文件，只有两种写方式：覆盖写 or 尾部添加。覆盖写不适用于保存日志，而尾部添加如上所示效果，较新的日志，排在底部。疯狂滚动是一种不可理喻的交互行为（开发人员要懂得节约用户的时间，无论用户是谁）。那有什么方法可以改进？<br/>
　　2、第二次构思的文件结构，便是数据库建表。用数据库存储日志，可以顺序存储，倒序取出，最终展示很容易做到最近写入的展示在顶部。</p>

<pre><code>2015-06-01 21:39:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:38:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:37:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:36:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:35:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:34:07 应用特征名 日志级别【日志内容】\r\n  
</code></pre>

<p>　　表结构为：</p>

<pre><code>CREATE TABLE IF NOT EXISTS 'log' ("  
"[rowid] integer PRIMARY KEY ASC AUTOINCREMENT DEFAULT 1,"  
"[dateTimeString] char(30),"//日期字符串  
"[logLevelString] char(30),"//日志等级字符串  
"[appName] varchar(50),"//消息动向类型:接受或者发送  
"[logContent] text,"//日志内容，AES128加密字符串  
"[logLevel] integer,"//日志级别  
"[timestamp] double"//时间戳，用于倒序查询  
")"  
</code></pre>

<p>　　此外，<strong>为了避免日志内容被不法用户导出获取秘钥及服务器接口地址，对每一条日志内容做AES128加密保存</strong>。</p>

<h5>二、日志查看体验</h5>

<p>　　1、第一次构思，确定搜索是必不可少的。例如，以前碰到一个”登录奖励”提示框偶尔不弹出的问题。该功能根据接收到的消息内容，弹框展示。离线时走APNS通道，在线时用实时消息承载。偏偏debug模式下的实时消息承载100%正常，发布模式下的APNS偶尔异常，但又不是每次必现，这种情况只能打印日志进文件，记录接收到的消息内容。到这里，就出现了体验痛点。从一堆log里，挑出某“关键字”的消息内容，如大海捞针，只能copy到电脑的文本编辑器中全文搜索。<br/>
　　2、第二次构思，需要将搜索到的关键字高亮。在第一次构思方案下，搜索的体验仍然不尽如意，在UITextView大篇幅的文本中搜索，滚屏频繁根本不知道当前匹配到的关键字在哪个位置。因此，高亮可有效解决此问题，将UITextView中的文本全部改为NSAttributedString。<br/>
　　3、第三次构思，关键字匹配忽略大小写。手机上查看日志，区分大小写的输入十分繁琐，且查看日志一般没有将关键字精确到大小写的场景，因此忽略大小写的搜索，可以减少输入代价。<br/>
　　4、第四次构思，搜索完毕，停留并提示一次“已经到末尾”，然后将搜索起始位置设置到开头。在不知情的场景下，搜索下一个匹配对象，是无法获知前方有多少匹配数的，因此在没有可匹配对象后，提示，并在末尾停留一次，可以很友好的展示搜索结果。</p>

<h5>三、日志文件管理</h5>

<p>　　1、首先，日志文件数量和体积必须要做限制。规则如下：日志文件以日期命名，内容以天为单位存储在一个文件里；文件数大于某个指定值，比如10，删除当前日志文件数一半的较旧日志文件；单个日志文件大小不作限制；每次写日志前，确保写入时的日期的对应文件存在。<br/>
　　2、其次，日志查看页面支持在app内直接切换日志文件，并动态加载。使用之前写好的，给社交分享使用的IconSheet控件，方便展示文件图标和文件名。如下图：<br/>
　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/4%2F1.PNG" title="日志文件选取" alt="日志文件选取"/><br/>
　　3、最后，支持日志内容热加载。每次点击一个日志文件，首先关闭文件选取器，主界面开启进度指示，启动子线程，并在子线程池中将数据库读取任务放入FMDatabaseQueue，读取完成解密日志内容，还原为一个完整的NSAttributedString对象，在主线程中把得到的数据填入UITextView，同时关闭进度指示器，提示“新的内容已加载完成”（日志文件一多，解密耗费时间越多）。</p>

<h3>至此，一个自行设计的日志查看器，开发完毕。</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[屏幕适配二三事（一）—— 屏适的几种基本情况讨论]]></title>
    <link href="http://showmylym.github.io/blog/2015/05/10/ping-mu-shi-pei-er-san-shi-1/"/>
    <updated>2015-05-10T08:22:12+08:00</updated>
    <id>http://showmylym.github.io/blog/2015/05/10/ping-mu-shi-pei-er-san-shi-1</id>
    <content type="html"><![CDATA[<h3>各种iOS设备分辨率一览</h3>

<pre><code>设备              单倍分辨率     倍数  渲染分辨率      显示分辨率      缩放系数
iPhone6P（标准）  {414 x 736}   3x   {1242 x 2208}  {1080 x 1920}  1/1.15
iPhone6P（放大）  {375 x 667}   3x   {1125 x 2001}  {1080 x 1920}  0.96
iPhone6（标准）   {375 x 667}   2x   {750  x 1334}  {750  x 1334}  1.0
iPhone6（放大）   {320 x 568}   2x   {640  x 1136}  {750  x 1334}  1.171875
iPhone5          {320 x 568}   2x   {640  x 1136}
iPhone4          {320 x 480}   2x   {640  x 960}

设备             单倍分辨率     倍数  实际分辨率
iPad 2(mini)    {768 x 1024}  1x   {768  x 1024}
iPad mini 2(3)  {768 x 1024}  2x   {1536 x 2048}
iPad air 1(2)   {768 x 1024}  2x   {1536 x 2048}
iPad 3(4)       {768 x 1024}  2x   {1536 x 2048}  
</code></pre>

<p>　　由于iPhone 6系设备（包括6 plus）情况特殊，存在标准和放大两种显示模式，导致渲染时分辨率略有不同，不过渲染后最终其UI在缩放显示时的屏幕分辨率是确定的(<a href="http://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions" title="iPhone分辨率详解">详情戳这里</a>)。特别是iPhone 6 Plus，由于屏幕硬件限制，会强行缩放为{1080 x 1920}显示，故本文中的屏幕截图全部取自标准模式和1x（严格意义上说，放大模式和标准模式在app测试时都不能放过）。</p>

<h3>背景</h3>

<p>　　屏幕适配一直是老生常谈的话题，也一直是移动端app的重点之一。Apple每次新设备的发布，都会给iOS开发者带来一场灾难。如何最高效率地完成所有适配，成为一个新的讨论议题。<br/>
　　闲话稍叙，看场景。</p>

<h3>场景一 —— 微信聊天“表情选取栏”</h3>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E5%BE%AE%E4%BF%A1%E8%A1%A8%E6%83%85%E9%A6%96%E9%A1%B55c.jpg" title="微信聊天“表情选取栏”" alt="微信聊天“表情选取栏”"/></p>

<h3>场景一解析</h3>

<p>　　场景一属于散列布局，UI整体由众多相同类型的元素排列而成，适配时存在调整margin和space的可能性。因其元素本身较小，为了保证整体的保真度，无论何种屏幕，必须优先表情主体突出的原则，避免放大space，喧宾夺主。因此最佳的适配手段，是保持原有各项元素尺寸和space不变，挨个排入，不足一个元素单位的空间并入margin，适配对比如下图。<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E5%BE%AE%E4%BF%A1%E8%A1%A8%E6%83%85%E9%A6%96%E9%A1%B5%E5%AF%B9%E6%AF%94.png" title="微信聊天“表情选取栏”首页对比" alt="微信聊天“表情选取栏”首页对比"/></p>

<h3>场景二 —— 支付宝宫格样式首页</h3>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%AB%E6%A0%BC%E9%A6%96%E9%A1%B55c.jpg" title="支付宝首页" alt="支付宝首页"/></p>

<h3>场景二解析</h3>

<p>　　场景二属于全屏式布局，space不存在，看到的无内容区域属于矩形元素内部的margin，矩形元素整体仍被等分划分，它们瓜分屏幕，任何矩形元素之间不留外部margin。这种布局有两个适配要点，一是单行的矩形元素数量保持不变；二是矩形元素内的主体成比例放大，放大的量级与屏幕放大系数（大屏宽除以小屏宽，我是这么定义的）相关。众所周知，5c屏幕宽度为320（单倍像素，下同），屏幕系数为2；而6p上屏幕宽度为414，屏幕系数为3。因此，放大系数就是 414.0 / 320.0 ≈ 1.29 。如果4个矩形元素组成一行，那么5c上{80 x 120}的矩形元素size，在6p上就是{103.5 x 155.25}，内部文本字体大小x1.29，icon同字体放大倍数。为了印证观点，排除系统自动缩放的效果，将6p的支付宝首页截图缩放为原始尺寸的33.3%，5c的缩放为50%，关键部分如下图，可观察到6p截图中内容的字体仍然略大，由此可知字体适配的确是与屏幕放大系数相关。<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%AB%E6%A0%BC%E9%A6%96%E9%A1%B5%E5%AF%B9%E6%AF%94.png" title="支付宝首页对比" alt="支付宝首页对比"/></p>

<h3>场景三 —— 有信照片墙</h3>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E6%9C%89%E4%BF%A1%E7%85%A7%E7%89%87%E5%A2%995c.png" title="有信照片墙" alt="有信照片墙"/><br/>
　　场景三是我参与开发“有信”时碰到的，与场景二类似但略有不同。整体也是按照原有的宽高比乘以屏幕放大系数来等分屏幕，但margin和space保持不变。这样适配的原因是，照片墙突出的是图片，在屏幕有更多空间显示时，应当优先放大图片，弥补小屏幕浏览图片的先天缺陷——内容展示空间十分有限。那么很明显，效果应该是下图所示的样子。<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E6%9C%89%E4%BF%A1%E7%85%A7%E7%89%87%E5%A2%996p.png" title="有信照片墙" alt="有信照片墙"/></p>

<h3>场景四 —— 微信聊天气泡</h3>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E6%B0%94%E6%B3%A15c.png" title="微信聊天页面气泡UI" alt="微信聊天页面气泡UI"/><br/>
　　情况开始变得复杂了。前面说的都是等比等宽缩放，像这种上下左右都需要动态计算的情况如何处理呢？别急，先看看微信是如何处理的，不过在此之前依旧排除屏幕自动缩放的干扰，1倍size对比，如下图所示。<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E6%B0%94%E6%B3%A1%E5%AF%B9%E6%AF%94_5c.png" title="微信聊天“5c气泡UI”" alt="微信聊天“5c气泡UI”"/><br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E6%B0%94%E6%B3%A1%E5%AF%B9%E6%AF%94_6p.png" title="微信聊天“6p气泡UI”" alt="微信聊天“6p气泡UI”"/><br/>
　　问题来了。假设以气泡箭头方向为正，那么气泡正向margin为64px，反向margin有两种情况：1、5c上对方消息margin为49px，己方消息margin为45px；2、6p上对方消息margin为90px，己方消息margin为86px。尽管反向margin值有出入，但其在两种情况下两方消息的margin差值一致为4，由此可推断，这个页面的气泡UI是用纯代码写的(为什么？见下一回分晓)。另外，对于对方消息的气泡，5c上，气泡的宽度为207(320.0 - 64.0正margin - 49.0反margin)，而6p上，气泡的宽度为260(414.0 - 64.0正margin - 90.0反margin)。<br/>
　　这相当奇怪，既然保持了正margin不变，调整气泡宽度，那就应该同时保持反margin也不变，类似于场景三，让多出来的屏幕水平空间展示更多的气泡文字，这才发挥了大屏的作用。<br/>
　　手里头没有iPhone6的设备，根据其在iPhone6标准显示模式下的表现，应当能准确推断其实现方式。个人推测很可能iPhone6刚出来时，开发人员按照5c的正反margin值和6的屏宽375px，口算得出气泡宽度值262(375.0 - 64.0正margin - 49.0反margin)，然后写死在代码里，导致6以后的设备气泡宽度都是260±。</p>

<h3>场景五 —— 搜狗输入法</h3>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E6%90%9C%E7%8B%97%E9%94%AE%E7%9B%985c.png" title="搜狗输入法" alt="搜狗输入法"/><br/>
　　搜狗输入法这个场景好似不遵从任何适配规则。如下图对比数据所示，看起来像是针对每一个元素做了判断逻辑，做了条件处理。推测结果</p>

<pre><code>明显差值为24px = (50 * 3 + 46) - (44 * 3 + 40)  
</code></pre>

<p>　　还有6px，可能在未标注的行间距中，每个间距1像素。<br/>
　　实际上，输入法键盘这类元素众多的UI，适配起来也可大致遵从场景二的方法，水平方向：原始总宽度320.0 * 屏幕放大系数(6p为1.29，6为1.17)，包含的所有控件宽度也都乘以同一系数；竖直方向：原始总高度同样乘以屏幕放大系数，包含的控件同理。这样，做到不失真地放大，连带以后新出的设备屏幕也一并兼容了。<br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E6%90%9C%E7%8B%97%E9%94%AE%E7%9B%985c%E6%A0%87%E6%B3%A8.png" title="搜狗输入法5c标注" alt="搜狗输入法5c标注"/><br/>
<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/3%2F%E6%90%9C%E7%8B%97%E9%94%AE%E7%9B%986p%E6%A0%87%E6%B3%A8.png" title="搜狗输入法6p标注" alt="搜狗输入法6p标注"/></p>

<h3>综述</h3>

<p>　　综上五类场景所述，缩放和对齐，是屏幕适配需求的基本方法。但它们都不能完美解决问题，有时需要将二者结合使用，再配合字符串高度计算方法，完整得出元素的frame。将构造好的元素frame全部计算完毕存入数组，之后一次性取用、刷新UI，既满足了坐标动态化，又不至于让数据计算和UI展示逻辑混淆，易编写、易维护。<br/>
　　下一回，奉上一个Demo，“从0到1”实战演练。</p>

<h3>下集预告：</h3>

<p>　　屏幕适配二三事（二）—— UI构建两大武器 纯代码 pk 纯autolayout
　　</p>
]]></content>
  </entry>
  
</feed>
