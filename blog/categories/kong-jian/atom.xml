<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 控件 | 电一闪的博客]]></title>
  <link href="http://showmylym.github.io/blog/categories/kong-jian/atom.xml" rel="self"/>
  <link href="http://showmylym.github.io/"/>
  <updated>2015-10-21T22:37:37+08:00</updated>
  <id>http://showmylym.github.io/</id>
  <author>
    <name><![CDATA[雷一鸣(Jerry)]]></name>
    <email><![CDATA[showmylym@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[App日志查看器]]></title>
    <link href="http://showmylym.github.io/blog/2015/06/04/app-ri-zhi-cha-kan-qi/"/>
    <updated>2015-06-04T21:52:12+08:00</updated>
    <id>http://showmylym.github.io/blog/2015/06/04/app-ri-zhi-cha-kan-qi</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>　　实际开发中，有在生产环境里碰到诸多疑难杂症的棘手问题。对于问题，最佳解决手法之一是坏点检测，一层一层诊断，抽丝剥茧。那么诊断依据——日志，就是一种强大的执行手段。</p>

<h3>最终效果</h3>

<h5>日志按时间戳倒序展示，提供关键字搜索</h5>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/4%2F2.gif" title="日志文件选取" alt="日志文件选取"/></p>

<h5>日志文件选取器</h5>

<p><img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/4%2F3.gif" title="日志文件选取" alt="日志文件选取"/></p>

<h3>设计思想</h3>

<h5>一、文件结构：</h5>

<p>　　1、第一次构思的文件结构，就是简单的顺序写入文本文件，每一条记录加入一些格式化符号，增加辨识度。比如：</p>

<pre><code>2015-06-01 21:35:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:36:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:37:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:38:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:39:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:39:07 应用特征名 日志级别【日志内容】\r\n  
</code></pre>

<p>　　那么问题来了，作为文件，只有两种写方式：覆盖写 or 尾部添加。覆盖写不适用于保存日志，而尾部添加如上所示效果，较新的日志，排在底部。疯狂滚动是一种不可理喻的交互行为（开发人员要懂得节约用户的时间，无论用户是谁）。那有什么方法可以改进？<br/>
　　2、第二次构思的文件结构，便是数据库建表。用数据库存储日志，可以顺序存储，倒序取出，最终展示很容易做到最近写入的展示在顶部。</p>

<pre><code>2015-06-01 21:39:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:38:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:37:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:36:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:35:03 应用特征名 日志级别【日志内容】\r\n  
2015-06-01 21:34:07 应用特征名 日志级别【日志内容】\r\n  
</code></pre>

<p>　　表结构为：</p>

<pre><code>CREATE TABLE IF NOT EXISTS 'log' ("  
"[rowid] integer PRIMARY KEY ASC AUTOINCREMENT DEFAULT 1,"  
"[dateTimeString] char(30),"//日期字符串  
"[logLevelString] char(30),"//日志等级字符串  
"[appName] varchar(50),"//消息动向类型:接受或者发送  
"[logContent] text,"//日志内容，AES128加密字符串  
"[logLevel] integer,"//日志级别  
"[timestamp] double"//时间戳，用于倒序查询  
")"  
</code></pre>

<p>　　此外，<strong>为了避免日志内容被不法用户导出获取秘钥及服务器接口地址，对每一条日志内容做AES128加密保存</strong>。</p>

<h5>二、日志查看体验</h5>

<p>　　1、第一次构思，确定搜索是必不可少的。例如，以前碰到一个”登录奖励”提示框偶尔不弹出的问题。该功能根据接收到的消息内容，弹框展示。离线时走APNS通道，在线时用实时消息承载。偏偏debug模式下的实时消息承载100%正常，发布模式下的APNS偶尔异常，但又不是每次必现，这种情况只能打印日志进文件，记录接收到的消息内容。到这里，就出现了体验痛点。从一堆log里，挑出某“关键字”的消息内容，如大海捞针，只能copy到电脑的文本编辑器中全文搜索。<br/>
　　2、第二次构思，需要将搜索到的关键字高亮。在第一次构思方案下，搜索的体验仍然不尽如意，在UITextView大篇幅的文本中搜索，滚屏频繁根本不知道当前匹配到的关键字在哪个位置。因此，高亮可有效解决此问题，将UITextView中的文本全部改为NSAttributedString。<br/>
　　3、第三次构思，关键字匹配忽略大小写。手机上查看日志，区分大小写的输入十分繁琐，且查看日志一般没有将关键字精确到大小写的场景，因此忽略大小写的搜索，可以减少输入代价。<br/>
　　4、第四次构思，搜索完毕，停留并提示一次“已经到末尾”，然后将搜索起始位置设置到开头。在不知情的场景下，搜索下一个匹配对象，是无法获知前方有多少匹配数的，因此在没有可匹配对象后，提示，并在末尾停留一次，可以很友好的展示搜索结果。</p>

<h5>三、日志文件管理</h5>

<p>　　1、首先，日志文件数量和体积必须要做限制。规则如下：日志文件以日期命名，内容以天为单位存储在一个文件里；文件数大于某个指定值，比如10，删除当前日志文件数一半的较旧日志文件；单个日志文件大小不作限制；每次写日志前，确保写入时的日期的对应文件存在。<br/>
　　2、其次，日志查看页面支持在app内直接切换日志文件，并动态加载。使用之前写好的，给社交分享使用的IconSheet控件，方便展示文件图标和文件名。如下图：<br/>
　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/4%2F1.PNG" title="日志文件选取" alt="日志文件选取"/><br/>
　　3、最后，支持日志内容热加载。每次点击一个日志文件，首先关闭文件选取器，主界面开启进度指示，启动子线程，并在子线程池中将数据库读取任务放入FMDatabaseQueue，读取完成解密日志内容，还原为一个完整的NSAttributedString对象，在主线程中把得到的数据填入UITextView，同时关闭进度指示器，提示“新的内容已加载完成”（日志文件一多，解密耗费时间越多）。</p>

<h3>至此，一个自行设计的日志查看器，开发完毕。</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图标管理控件的实现-类似于iOS主页的效果]]></title>
    <link href="http://showmylym.github.io/blog/2015/01/06/tu-biao-guan-li-kong-jian-de-shi-xian-lei-si-yu-ioszhu-ye-de-xiao-guo/"/>
    <updated>2015-01-06T08:22:12+08:00</updated>
    <id>http://showmylym.github.io/blog/2015/01/06/tu-biao-guan-li-kong-jian-de-shi-xian-lei-si-yu-ioszhu-ye-de-xiao-guo</id>
    <content type="html"><![CDATA[<h3>开发背景:</h3>

<p>　　前段时间因工作需要，写了一个图标管理控件。日常开发中可能类似的需求不少，于是做成可复用的代码库，当作编写可复用控件的开端。  <br/>
　　　　　　　　　　　　　　　　　　　　　　　　　　　－－题记  <br/>
　　这个图标管理控件我为其命名为DraggableView，意为可拖动视图，它继承于UIView，与UITableView类似，它有自己的cell，cell中实现长按拖动(LongPressGesture)、点击选择(TapGesture)，以及删除功能。Github代码库地址：<br/>
　　<a href="https://github.com/showmylym/LYMDraggableView">https://github.com/showmylym/LYMDraggableView</a>  <br/>
　　<br/>
　　<br/>
　　以下是控件演示：  <br/>
　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-12.gif" title="图片2-12" alt="图片2-12"/><br/>
　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-13.gif" title="图片2-13" alt="图片2-13"/><br/>
　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-14.gif" title="图片2-14" alt="图片2-14"/></p>

<p>　　纵观iOS App市场，有类似实现效果的应用不少，如下截图：</p>

<h4><em>优酷视频iPad客户端</em>管理离线视频</h4>

<p>　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-1.gif" title="图片2-1" alt="图片2-1" width="480"/></p>

<h4><em>微信讨论组</em>增删人员</h4>

<p>　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-2.gif" title="图片2-2" alt="图片2-2" width="480"/></p>

<h4><em>有信收藏栏</em></h4>

<p>　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-3.gif" title="图片2-3" alt="图片2-3"/></p>

<h4><em>有信照片墙</em></h4>

<p>　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-4.gif" title="图片2-4" alt="图片2-4"/></p>

<h3>大致工作流程为：</h3>

<p>　　1、点击可选择，类似于UITableView的didSelect方法。  <br/>
　　2、长按一个cell，触发编辑状态。编辑状态的cell将放大显示，所有图标将以角度3°轻微旋转，表示当前的拖动编辑状态。处于编辑状态的cell可以被删除、被拖动重排序，但不能触发点击回调，两种操作都有回调暴露，在代理对象中编写具体实现。  <br/>
　　3、若数据源层级中添加了新的cell，只需[draggableView reloadData]调用一次即可刷新UI。刷新完成时，draggableView向代理对象发送didResizeWithFrame消息，代理实现可根据此回调适时改变视图中UIScrollView的contentSize，适应新内容大小。</p>

<h4>下图为正常状态下各个部分的有效区域：</h4>

<p>　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-5.png" title="图片2-5" alt="图片2-5"/></p>

<h4>下图为编辑状态下各个部分的有效区域：</h4>

<p>　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-6.png" title="图片2-6" alt="图片2-6"/></p>

<h3>大致使用流程为：</h3>

<h4>1、初始化：</h4>

<pre><code>self.mainDraggableView = [[LYMDraggableView alloc] initWithFrame:CGRectMake(0.0, 0.0, screenWidth, draggableViewHeight) layoutType:LYMDraggableViewLayoutByColumnNum horizontalMargin:0.0 verticalMargin:0.0 vSpace:4.0 maxColumn:4.0 cornerRadius:nil];
self.mainDraggableView.delegate = self;
self.mainDraggableView.dataSource = self;
self.mainDraggableView.backgroundColor = [UIColor whiteColor];
[self.mainScrollView addSubview:self.mainDraggableView];
</code></pre>

<p>　　这里有个技术细节问题。对UIView及其子类初始化时，如果调用</p>

<pre><code>[[UIView alloc] initWithFrame:rect]
</code></pre>

<p>　　方法，那么rect的宽或高都最好不要为0，可根据已有数据源，调用DraggableView中的类方法</p>

<pre><code>+ (CGFloat)heightOfDraggableViewFromVMargin:(CGFloat)vmargin cellHeight:(CGFloat)cellHeight vSpace:(CGFloat)vSpace itemsCount:(NSUInteger)itemsCount;
</code></pre>

<p>　　得到预计高度。实际情况证明，rect的宽高值有一项为0时，界面中的所有添加在此容器view中的subview，其autoresizing机制将出现异常（autolayout不知，没试过，类推情况应该类似）。  <br/>
　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-7.jpg" title="图片2-7" alt="图片2-7"/>  <br/>
　　如上图2-7，根据官方文档里对其中一种autoresizing类型——UIViewAutoresizingFlexibleLeftMargin的描述原文：The distance between the view’s left edge and the superview’s left edge grows or shrinks as needed.  <br/>
　　意为：view的左边与其superView的左边距离，可根据实际情况动态增大或减小。也就是说，如果启用此种autoresizing类型，view与superView之间的右边距是保持不变的。因此，若supeView没有设置正确的初始rect（例如width为0），view将无法自动管理与superView之间的左边距。  <br/>
　　在DraggableView的初始化方法中，会检测height是否为0。若为0，则自动将其赋值为1。  <br/>
　　下图2-8为起初编写DraggableCell初始化方法时未给予titleLabel合法height（height > 0）的结果——label上的text无故消失。  <br/>
　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-8.png" title="图片2-8" alt="图片2-8"/></p>

<h4>２、实现数据源方法</h4>

<pre><code>- (NSInteger)numberOfCellsInDraggableView:(LYMDraggableView *)draggableView; // 返回cell的个数    
- (CGSize)cellContentViewSizeInDraggableView:(LYMDraggableView *)draggableView; // 返回cell的contentSize，Demo中将宽高值都乘以了屏幕比例系数，以适配大屏
- (CGSize)cellCornerBtnSizeInDraggableView:(LYMDraggableView *)draggableView; // 返回cell的边角按钮size，用于在编辑状态时显示删除按钮，可设定位置左上或右上，同样乘以屏幕比例系数
- (CGSize)cellSizeInDraggableView:(LYMDraggableView *)draggableView; // 返回cell自身的size，宽度 = contentSize.width + 2 * cornerBtnSize.witdh / 2.0, 高度 = contentSize.height + cornerBtnSize.witdh / 2.0. 有效区域见上图2-5
- (LYMDraggableViewCell *)draggableView:(LYMDraggableView *)draggableView cellForIndex:(NSUInteger)index; // 使用DraggableViewCell的初始化方法创建cell，cell不能像UITableViewCell那样复用，详情参照demo
- (void)draggableView:(LYMDraggableView *)draggableView didSelectCellAtIndex:(NSUInteger)index; // 普通状态下选中一个项。例如作为查看item对应的详细信息的入口
- (void)draggableView:(LYMDraggableView *)draggableView didResizeWithFrame:(CGRect)frame; // 每次调用DraggableView的实例方法[instance reloadData]刷新完自身frame后，利用此回调可适时调整其superView容器的contentSize。例如draggableView所在UIScollView或UITableViewCell的contentSize。
- (void)draggableView:(LYMDraggableView *)draggableView cornerBtnPressedAtIndex:(NSUInteger)index; //边角按钮点击回调。可用作删除操作确认，或其他自定义功能。
- (void)draggableView:(LYMDraggableView *)draggableView didMoveCellFromIndex:(NSUInteger)fromIndex toIndex:(NSUInteger)toIndex; // 移动了一个cell，从fromIndex移动到toIndex。
- (BOOL)draggableView:(LYMDraggableView *)draggableView canMoveAtIndex:(NSUInteger)index; // 判断某个index的cell，是否可以被移动。
- (BOOL)draggableView:(LYMDraggableView *)draggableView canShakeWhenEditingAtIndex:(NSUInteger)index; // 判断某个index的cell，是否可以使用抖动动画表示编辑状态。
- (BOOL)draggableView:(LYMDraggableView *)draggableView canEditingAtIndex:(NSUInteger)index; //判断某个index的cell，是否可以切换为编辑状态。  
</code></pre>

<p>　　上面这三个can&hellip;方法在控制首尾两个cell时没有问题，但对于其他位置的cell控制不是很方便。首次很好，被重新排序后需要reloadData才能重新计算各个cell的正确index。详情参见Demo中的</p>

<pre><code>[ didMoveCellFromIndex]
</code></pre>

<p>　　协议方法实现。</p>

<pre><code>- (CGFloat)draggableView:(LYMDraggableView *)draggableView cellEditingScaleUpFactorAtIndex:(NSUInteger)index; // 将长按cell的放大系数以回调方式暴露出来  
- (void)draggableViewBeginEditing:(LYMDraggableView *)draggableView; // draggableView进入编辑状态回调  
- (void)draggableViewEndEditing:(LYMDraggableView *)draggableView; // draggableView结束编辑状态回调  
</code></pre>

<h3>最后，再简单说说几个关键算法的处理逻辑：</h3>

<h4>1、整体布局。</h4>

<p>　　布局基于320.0宽度的1x屏幕，640.0的2x屏可自动x2，但iPhone 6、iPhone6 Plus无法最佳自动适配，因此会在关键的contentSize后乘以屏比系数，该系数值为：UIScreenBoundsWidth/320.0。</p>

<h4>2、图标排列。</h4>

<p>　　最初设计包含了两种排列类型，一种LYMDraggableViewLayoutByCellSize，保持cell的size不变，cell之间的列间距自适应。如果有足够空间，在当前行再插入一个cell；另一种为LYMDraggableViewLayoutByColumnNum，保持cell的size相对屏幕宽度成比例放大或缩小，列数不变，cell之间的列间距按照剩余空间自适应。边距仍然保持不变，使用初始值。  <br/>
　　第一种没有实现，目前代码中使用的是第二种。如果以后有需要，不排除实现第一种排列类型。</p>

<h4>3、判定移动。</h4>

<p>　　水平方向上，取被拖动cell水平中心点的坐标x，长按手势触发后在每次手势的didMove回调中检查x的值是否在原来某个cell的区域内。如果在，则立即插入到此位置。因此过程计算量较大，特别需要注意将数据计算与界面绘制独立开，保证代码思路清晰，后续可维护。</p>

<h4>4、界面绘制逻辑。</h4>

<p>　　用了些基本算法，先算出总共几行几列，之后依次由外至内循环，从行开始，逐列计算。算完一个cell，将其frame数据作为下一个cell的frame计算依据，全程使用相对坐标。详细过程参照draggableView中的resetLayout方法。</p>

<h3>整体感悟：</h3>

<h4>1、业务逻辑与功能实现分离。</h4>

<p>　　这点非常重要，分离的好，可重用度高，可快速应用在新的场景中，节约开发成本。</p>

<h4>2、数据计算与界面绘制相互独立。</h4>

<p>　　这点显著益处是维护耗时短，有问题易暴露、易定位。试想数据计算与界面绘制夹杂在一处，写代码时图了方便，过几天自己看自己写的代码也得花上好些时间才能理清头绪，稍有不慎修改界面绘制却误改了数据计算代码，离完成之日遥遥无期。同时，它还引出第3个问题。</p>

<h4>3、站在陌生人角度审视自己的代码。</h4>

<h5>具体做法是：</h5>

<h5>1、关键位置写好注释。必要时在方法声明处使用VVDocumenter插件生成Xcode注释，效果如下图2-9、2-10.</h5>

<h6>注释的样子</h6>

<p>　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-9.png" title="图片2-9" alt="图片2-9"/></p>

<h6>快速查看方法说明的样子</h6>

<p>　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-10.png" title="图片2-10" alt="图片2-10"/></p>

<h5>2、利用XCode的pragma分块特性提高定位效率</h5>

<p>　　<img src="http://showmylym-blog.oss-cn-shenzhen.aliyuncs.com/2/2-11.png" title="图片2-11" alt="图片2-11"/>  <br/>
　　客观上说，程序员不可能一直做一个功能，轮岗才能调动员工工作积极性。在创业团队，第一波带领团队开发产品的开发人员，日后一定会有更多产品需要充当前锋。同样地，对于中间介入开发的开发人员来说，无论出于职业道德在今后换阵营交接时快速且复杂度低，还是平日请个一星期病假事假由其他人暂时顶替开发，站在对方的角度编写代码，都是百利而无一害的。（这是在有信学到的^__^）。  <br/>
　　去年听闻的一句名言：<strong>要假想以后维护自己代码的人，是知道自己住处地址的精神病，那么写代码还会那么随意么？</strong></p>

<h3>后记：</h3>

<p>　　距离上一篇博客发布已一个月有余，其实积攒了很多材料，但真的想把这一篇写好，写到自己满意的程度再发出来，着实不易。
　　</p>
]]></content>
  </entry>
  
</feed>
